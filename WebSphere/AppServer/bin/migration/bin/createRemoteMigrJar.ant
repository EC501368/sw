<project name="createRemoteMigrJar" default="createRemoteMigrJar" basedir=".">
    
    <target name="createRemoteMigrJar" description="Create a jar containing the files needed to Run WASPreUpgrade on a remote machine."
        depends="detectCurrentOS, setOSFileSeparator, setOSFileExtension">
        <antcall target="doWork"/>
    </target>

    <target name="doWork" depends="createRemoteMigrJarFile"/>

    <target name="detectCurrentOS" description="Detects the current OS.">
        <condition property="currentOS" value="os/400">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>
        <condition property="currentOS" value="aix">
            <equals arg1="${os.name}" arg2="AIX"/>
        </condition> 
        <condition property="currentOS" value="hpux">
            <equals arg1="${os.name}" arg2="HP-UX"/>
        </condition>
        <condition property="currentOS" value="sun">
            <or>
                <equals arg1="${os.name}" arg2="SunOS"/>
                <equals arg1="${os.name}" arg2="Solaris"/>
            </or>
        </condition>
        <condition property="currentOS" value="windows">
            <os family="windows"/>
        </condition>
        <!-- If it is not any of the above and we are of the unix family - then assume linux. -->
        <condition property="currentOS" value="linux">
            <os family="unix"/>
        </condition>
    </target>

    <target name="setOSFileSeparator"
            description="Sets the current file separator for this platform.">
        <condition property="separatorFile" value="\">
            <equals arg1="${currentOS}" arg2="windows"/>
        </condition>
        <condition property="separatorFile" value="/">
            <not>
                <equals arg1="${currentOS}" arg2="windows"/>
            </not>
        </condition>
    </target>

    <target name="setOSFileExtension"
            description="Sets the current file extension for this platform.">
        <condition property="fileExtension" value=".bat">
            <equals arg1="${currentOS}" arg2="windows"/>
        </condition>
        <condition property="fileExtension" value="">
            <equals arg1="${currentOS}" arg2="os/400"/>
        </condition>
        <property name="fileExtension" value=".sh"/>
    </target>

    <!-- The next three targets
        1. Determine the version of the JDK to be collected - ($WAS_HOME/java has precedences).
        2. and create two files - (both are used later when the Remote Migration Jar is created).
            a) an ant includesfile pointing to the location of the correct JDK.
               contents will be 1 line similar to    "java1.7/**/*"
            b) a cmdDefaultSDK.properties file set to use the correct JDK matching a). 
               contents will be 1 line similar to    "COMMAND_DEFAULT_SDK=1.6_64"
         We will take the Default JDK ($WAS_INSTALL_ROOT/java) as our first choice because
         	1) there is a better chance the older JDK is supported on the older machine.
         	2) our test cases use the defautlt shipped setting of the cmdDefaultSDK.properties file. 
    -->
    <target name="setSDKinfo" description="Determine which SDK uses the WAS_HOME/java dir.">
        <mkdir dir="${TARGETDIR}/properties"/>

        <property name="SDKcmdfile" value="cmdDefaultSDK.properties"/>
        <property name="propertySDKdir" value="${WAS_INSTALL_ROOT}/properties/sdk"/>
        <property name="currentSDKcmdfile" value="${propertySDKdir}/${SDKcmdfile}"/>

        <!-- used later to zip the correct JDK and matching cmdDefaultSDK.properties file. -->
        <property name="remoteSDKcmdfile" value="${TARGETDIR}/properties/sdk/${SDKcmdfile}"/>
        <property name="javaZipIncludes" value="${TARGETDIR}/properties/java4zip.includes"/>

        <!-- Only one of these targets will be triggered based on the ${is.java.dir.present} property. -->
        <available file="${WAS_INSTALL_ROOT}/java" type="dir" property="is.java.dir.present"/>
        <antcall target="createSDKcmdfile"/>
        <antcall target="copyInstallSDKcmdfile"/>
    </target>
        
    <target name="createSDKcmdfile" if="is.java.dir.present">
        <!-- Since the java dir exists, set the includesfile to collect it! -->
        <echo message="java/**/*" file="${javaZipIncludes}"/>
        
        <!-- Set the cmdDefaultSDK.properties to point to the right JDK for the java dir. -->
        <concat destFile="${remoteSDKcmdfile}">
            <fileset dir="${propertySDKdir}" includes="*.properties"/>
            <filterchain>
                <tokenfilter>
                    <containsregex pattern="com.ibm.websphere.sdk.location.*/java$"/>
                        <!-- the \1 capture will be the JDK version.    "1.6_64" -->
                    <replaceregex  pattern="com.ibm.websphere.sdk.location.([^=]+)=.*/java$"
                                   replace="COMMAND_DEFAULT_SDK=\1"
                                   byline="true"/>
                </tokenfilter>
                <headfilter lines="1"/>
            </filterchain>
        </concat>
    </target>

    <target name="copyInstallSDKcmdfile" unless="is.java.dir.present">
        <!-- Since the java dir does not exist. We'll take the current set up. -->
        <copy file="${currentSDKcmdfile}" toFile="${remoteSDKcmdfile}"/>
        
        <!-- Now determine the name and location of the java dir, as pointed to by the SDK property files. -->
        <loadproperties srcFile="${remoteSDKcmdfile}"/>
        <property name="javaLocation" value="com.ibm.websphere.sdk.location.${COMMAND_DEFAULT_SDK}"/>
        
        <!-- and create the proper includesfile. -->
        <copy file="${propertySDKdir}/${COMMAND_DEFAULT_SDK}.properties" tofile="${javaZipIncludes}">
            <filterchain>
                <tokenfilter>
                    <containsregex pattern="${javaLocation}.*"/>
                        <!-- the \1 capture will be the JDK dir.   "java" or "java1.7" -->
                    <replaceregex  pattern="${javaLocation}=.*/([^/]*)$"
                                   replace="\1/**/*"
                                   byline="true"/>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>
    
    <target name="createRemoteMigrJarFile" description="Main target to clean up profile action registry" depends="setSDKinfo">
        <condition property="TARGETOS" value="${currentOS}">
            <not>
                <isset property="TARGETOS"/>
            </not>
        </condition>

        <property name="migrJarFile" value="${TARGETDIR}/WAS_V85_${TARGETOS}.${os.arch}_RemoteMigrSupport.jar"/>
        <jar destfile="${migrJarFile}">
            <zipfileset dir="${WAS_INSTALL_ROOT}"
                        filemode="755" dirmode="755">
                <include name="bin/infocenter*"/>
                <include name="bin/onlinesupport*"/>
                <include name="bin/sdk/**/*"/>
                <include name="bin/setupCmdLine*"/>
                <include name="bin/versionInfo*"/>
                <include name="configuration/config.ini"/>
                <exclude name="derby/databases/**/*"/>
                <include name="derby/bin/**/*"/>
                <include name="derby/lib/**/*"/>
                <include name="derby/migration/**/*"/>
                <include name="etc/**/*"/>
                <include name="features/**/*"/>
                <include name="lib/**/*"/>
                <include name="optionalLibraries/**/*"/>
                <include name="plugins/**/*"/>
                <include name="properties/*"/>
                <include name="properties/logbr/**/*"/>
                <include name="properties/schemas/**/*"/>
                <include name="properties/sdk/**/*"/>
                      <!-- we created our own - so don't collect this file. -->
                <exclude name="properties/sdk/**/${SDKcmdfile}"/>
                <include name="properties/version/**/*"/>
                <include name="properties/workspace/**/*"/>
                      <!-- collect the correct JDK level. -->
                <includesfile name="${javaZipIncludes}"/>
            </zipfileset>
                      <!-- Collect our generated cmdDefaultSDK.properties matching the JDK collected. -->
            <zipfileset dir="${TARGETDIR}"
                        filemode="755" dirmode="755"
                        includes="properties/sdk/${SDKcmdfile}"/>
            <zipfileset dir="${WAS_INSTALL_ROOT}/bin/migration/filesForRemoteMigr"
                        filemode="755" dirmode="755"
                        includes="bin/WASPreUpgrade${fileExtension}.cp"
                        fullpath="bin/WASPreUpgrade${fileExtension}"/>
        </jar>
        <delete dir="${TARGETDIR}/properties"/>
    </target>
</project>

